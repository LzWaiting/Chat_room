电子词典

一.功能说明:
	1. 用户可以登录和注册
		登录凭借用户名密码即可
		注册要求用户必须填写用户名和密码其他内容自定
		用户名要求不能够重复
	2. 用户数据要求使用数据库长期保存
		数据表自定
	3. 能够满足多个用户同时登录操作需求
	4. 功能分为客户端和服务端，客户端要求发起请求，服务端处理请求，
		用户启动客户端即进入一级界面
		登录 	注册 	退出
	5. 用户登录后即进入二级界面
		查单词	查看历史记录	退出
		查单词：输入单词，显示单词意思，可以循环查询，输入##表示退出查询
		查看历史记录：查看当前用户的历史查词记录
		name 	word 	time
		退出：退出到一级界面，相当于注销

二.确定技术点
	1. 项目分析 仿照ftp和聊天室进行项目分析
		>>> 客户端：
				打印界面
				发出请求
				接收反馈
				打印结果
		>>> 服务端：
				导入字典信息
				登录
				注册
				查单词
				查看历史记录
				退出登录
		>>> 技术点：
				并发方式 sys.fork
				套接字	tcp 套接字
				数据库	mysql
				查单词 	文本

		工作流程：
			创建数据库，存储数据，搭建通信框架，建立并发关系，实现具体功能封装

	2. 什么并发，什么套接字，什么数据库？文件处理还是数据库查询？如果是数据库查询如何将单词存入数据库
		>>> 多进程并发process，tcp套接字,mysql数据库，数据库查询

	3. 建立数据表/集合
		建立几个表 每个表结构 表关系
		创建数据库dict
		建立3个表，
			表1，存储单词words
				查单词
				id		word 		interpret
			表2，用户信息user
				登录/注册
				id		name		password
			表3，记录查看历史记录hist
				查询和查看历史记录会使用到
				id		name		word		time	

			>>> create database dict default charset=utf8;
			>>> create table user(id int primary key auto_increment,
								name varchar(32) not null,
								password varchar(16) default '000000');
			>>> create table words(id int primary key auto_increment,
								word varchar(32) not null,
								interpret text not null);
			>>> create table hist(id int primary key auto_increment,
								name varchar(32) not null,
								word varchar(32) not null,
								time varchar(64));	

	4. 搭建通信框架
		服务端：创建套接字-->创建父子进程-->子进程等待处理客户端请求-->父进程持续接收下一个客户端连接

		客户端：创建套接字-->发起连接请求-->进入一级界面-->发起请求（注册，登录，退出）-->登录成功-->进入二级界面-->发起请求（查词，看记录，退出...）


	5. 分析有几个功能，如何封装，每个功能具体实现什么内容

三.功能实现
	注册
		客户端：
			1.输入注册信息
			2.将注册信息发送给服务器
			3.得到服务器反馈
		服务端：
			1.接收客户端请求
			2.判断是否允许注册
			3.将结果反馈客户端
			4.注册信息插入数据库
	cookie:
		import getpass
		password = getpass.getpass()
			功能：隐藏密码输入
	登录
		客户端：
			1.输入登录信息
			2.将登录信息发送给服务端
			3.得到服务器反馈
		服务端：
			1.接收客户端请求
			2.判断是否允许登录
			3.将结果反馈给客户端
	
	查单词
		客户端：
			1.输入要查询的单词信息
			2.将查询信息发送给服务端
			3.获得服务端反馈
		服务端：
			1.接收客户端请求
			2.判断客户端请求
			3.将结果反馈给客户端
			4.将查询记录添加到数据库中

	历史记录
		客户端：
			1.输入查看历史记录请求
			2.将请求发送给服务端
			3.获得服务端反馈
		服务端：
			1.接收客户端请求
			2.判断客户端请求
			3.将结果反馈给客户端